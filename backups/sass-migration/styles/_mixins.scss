// Mixins - Essential mixins for buttons, cards, forms, flexbox, grid, and responsive design

@use 'breakpoints';
@use 'variables';
@use 'constants';
// Flexbox mixins
@mixin flex-start {
  display: flex;
  justify-content: flex-start;
  align-items: center;
}

@mixin flex-between {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

@mixin flex-center {
  display: flex;
  justify-content: center;
  align-items: center;
}

@mixin flex-column {
  display: flex;
  flex-direction: column;
}

@mixin flex-column-center {
  @include flex-column;
  align-items: center;
  justify-content: center;
}

// Responsive breakpoints
@mixin respond-to($breakpoint) {
  @if $breakpoint == xs {
    @media (max-width: #{breakpoints.$breakpoint-xs - 1px}) {
      @content;
    }
  } @else if $breakpoint == sm {
    @media (min-width: #{$breakpoint-sm}) {
      @content;
    }
  } @else if $breakpoint == md {
    @media (min-width: #{$breakpoint-md}) {
      @content;
    }
  } @else if $breakpoint == lg {
    @media (min-width: #{$breakpoint-lg}) {
      @content;
    }
  } @else if $breakpoint == xl {
    @media (min-width: #{$breakpoint-xl}) {
      @content;
    }
  } @else if $breakpoint == 2xl {
    @media (min-width: #{$breakpoint-2xl}) {
      @content;
    }
  }
}

// Button mixins
@mixin button-base {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  border-radius: constants.$border-radius-md;
  font-size: constants.$font-size-sm;
  font-weight: constants.$font-weight-medium;
  transition: all constants.$transition-fast;
  cursor: pointer;
  border: constants.$border-width-thin solid transparent;
  text-decoration: none;

  &:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }

  &:focus {
    outline: none;
    box-shadow: 0 0 0 2px variables.$ring;
  }
}

@mixin button-variant($bg-color, $text-color, $border-color: $bg-color, $hover-bg: color-adjust($bg-color, -10%, oklch)) {
  background-color: $bg-color;
  color: $text-color;
  border-color: $border-color;

  &:hover:not(:disabled) {
    background-color: $hover-bg;
  }
}

@mixin button-size($padding-y, $padding-x, $font-size: constants.$font-size-sm) {
  padding: $padding-y $padding-x;
  font-size: $font-size;
}

// Card mixins
@mixin card-base {
  background-color: variables.$card;
  border: constants.$border-width-thin solid variables.$border;
  border-radius: constants.$border-radius-lg;
  box-shadow: constants.$shadow-sm;
  transition: box-shadow constants.$transition-normal;

  &:hover {
    box-shadow: constants.$shadow-md;
  }
}

@mixin card-header {
  padding: constants.$spacing-lg;
  border-bottom: constants.$border-width-thin solid variables.$border;
}

@mixin card-body {
  padding: constants.$spacing-lg;
}

@mixin card-footer {
  padding: constants.$spacing-lg;
  border-top: constants.$border-width-thin solid variables.$border;
  background-color: variables.$muted;
}

// Form mixins
@mixin form-group {
  margin-bottom: constants.$spacing-lg;

  &:last-child {
    margin-bottom: 0;
  }
}

@mixin input-base {
  width: 100%;
  padding: constants.$spacing-sm constants.$spacing-md;
  background-color: variables.$input;
  border: constants.$border-width-thin solid variables.$border;
  border-radius: constants.$border-radius-md;
  font-size: constants.$font-size-sm;
  transition: border-color constants.$transition-fast, box-shadow constants.$transition-fast;

  &:focus {
    outline: none;
    border-color: variables.$ring;
    box-shadow: 0 0 0 2px color-change(variables.$ring, 0.2);
  }

  &::placeholder {
    color: $muted-foreground;
  }

  &:disabled {
    background-color: variables.$muted;
    cursor: not-allowed;
  }
}

@mixin label-base {
  display: block;
  margin-bottom: constants.$spacing-xs;
  font-size: constants.$font-size-sm;
  font-weight: constants.$font-weight-medium;
  color: variables.$foreground;
}

@mixin form-error {
  margin-top: constants.$spacing-xs;
  font-size: constants.$font-size-xs;
  color: variables.$destructive;
}

// Flexbox mixins
@mixin flex-start {
  display: flex;
  justify-content: flex-start;
  align-items: center;
}

@mixin flex-end {
  display: flex;
  justify-content: flex-end;
  align-items: center;
}

@mixin flex-between {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

@mixin flex-center {
  display: flex;
  align-items: center;
  justify-content: center;
}

@mixin flex-column {
  display: flex;
  flex-direction: column;
}

@mixin flex-column-center {
  @include flex-column;
  align-items: center;
  justify-content: center;
}

// Grid mixins
@mixin grid-auto-fit($min-column-width, $gap: constants.$spacing-md) {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax($min-column-width, 1fr));
  gap: $gap;
}

@mixin grid-auto-fill($min-column-width, $gap: constants.$spacing-md) {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax($min-column-width, 1fr));
  gap: $gap;
}

@mixin grid-cols($count, $gap: constants.$spacing-md) {
  display: grid;
  grid-template-columns: repeat($count, 1fr);
  gap: $gap;
}

// Utility mixins
@mixin visually-hidden {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

@mixin sr-only {
  @include visually-hidden;
}

@mixin truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

@mixin line-clamp($lines) {
  display: -webkit-box;
  -webkit-line-clamp: $lines;
  -webkit-box-orient: vertical;
  overflow: hidden;
}

// Animation mixins
@mixin transition($property: all, $duration: constants.$transition-normal, $ease: ease-in-out) {
  transition: $property $duration $ease;
}

@mixin transform($transforms...) {
  transform: $transforms;
}

// Spacing mixins
@mixin spacing($property, $size) {
  #{$property}: map-get($spacing, $size);
}

// Border radius mixin
@mixin border-radius($radius) {
  border-radius: $radius;
}

// Typography mixins
@mixin text-style($size, $weight: normal, $line-height: normal) {
  font-size: $size;
  font-weight: $weight;
  line-height: $line-height;
}

@mixin heading($level) {
  @if $level == 1 {
    @include text-style($font-size-4xl, constants.$font-weight-bold, $line-height-tight);
  } @else if $level == 2 {
    @include text-style($font-size-3xl, constants.$font-weight-bold, $line-height-tight);
  } @else if $level == 3 {
    @include text-style($font-size-2xl, constants.$font-weight-semibold, $line-height-tight);
  } @else if $level == 4 {
    @include text-style(constants.$font-size-xl, constants.$font-weight-semibold, $line-height-snug);
  } @else if $level == 5 {
    @include text-style(constants.$font-size-lg, constants.$font-weight-medium, $line-height-snug);
  } @else if $level == 6 {
    @include text-style(constants.$font-size-base, constants.$font-weight-medium, $line-height-snug);
  }
}